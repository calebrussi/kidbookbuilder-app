"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@11labs";
exports.ids = ["vendor-chunks/@11labs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@11labs/client/dist/lib.modern.js":
/*!********************************************************!*\
  !*** ./node_modules/@11labs/client/dist/lib.modern.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Conversation: () => (/* binding */ f),\n/* harmony export */   postOverallFeedback: () => (/* binding */ g)\n/* harmony export */ });\nfunction e(){return e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)({}).hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},e.apply(null,arguments)}function t(e){const t=new Uint8Array(e);return window.btoa(String.fromCharCode(...t))}function n(e){const t=window.atob(e),n=t.length,s=new Uint8Array(n);for(let e=0;e<n;e++)s[e]=t.charCodeAt(e);return s.buffer}const s=new Map;function a(e,t){return async n=>{const a=s.get(e);if(a)return n.addModule(a);const o=new Blob([t],{type:\"application/javascript\"}),i=URL.createObjectURL(o);try{return await n.addModule(i),void s.set(e,i)}catch(e){URL.revokeObjectURL(i)}try{const a=`data:application/javascript;base64,${btoa(t)}`;await n.addModule(a),s.set(e,a)}catch(t){throw new Error(`Failed to load the ${e} worklet module. Make sure the browser supports AudioWorklets.`)}}}const o=a(\"raw-audio-processor\",'\\nconst BIAS = 0x84;\\nconst CLIP = 32635;\\nconst encodeTable = [\\n  0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\\n  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\\n  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\\n];\\n\\nfunction encodeSample(sample) {\\n  let sign;\\n  let exponent;\\n  let mantissa;\\n  let muLawSample;\\n  sign = (sample >> 8) & 0x80;\\n  if (sign !== 0) sample = -sample;\\n  sample = sample + BIAS;\\n  if (sample > CLIP) sample = CLIP;\\n  exponent = encodeTable[(sample>>7) & 0xFF];\\n  mantissa = (sample >> (exponent+3)) & 0x0F;\\n  muLawSample = ~(sign | (exponent << 4) | mantissa);\\n  \\n  return muLawSample;\\n}\\n\\nclass RawAudioProcessor extends AudioWorkletProcessor {\\n  constructor() {\\n    super();\\n              \\n    this.port.onmessage = ({ data }) => {\\n      switch (data.type) {\\n        case \"setFormat\":\\n          this.isMuted = false;\\n          this.buffer = []; // Initialize an empty buffer\\n          this.bufferSize = data.sampleRate / 4;\\n          this.format = data.format;\\n\\n          if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\\n            globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\\n              this.resampler = resampler;\\n            });\\n          }\\n          break;\\n        case \"setMuted\":\\n          this.isMuted = data.isMuted;\\n          break;\\n      }\\n    };\\n  }\\n  process(inputs) {\\n    if (!this.buffer) {\\n      return true;\\n    }\\n    \\n    const input = inputs[0]; // Get the first input node\\n    if (input.length > 0) {\\n      let channelData = input[0]; // Get the first channel\\'s data\\n\\n      // Resample the audio if necessary\\n      if (this.resampler) {\\n        channelData = this.resampler.full(channelData);\\n      }\\n\\n      // Add channel data to the buffer\\n      this.buffer.push(...channelData);\\n      // Get max volume \\n      let sum = 0.0;\\n      for (let i = 0; i < channelData.length; i++) {\\n        sum += channelData[i] * channelData[i];\\n      }\\n      const maxVolume = Math.sqrt(sum / channelData.length);\\n      // Check if buffer size has reached or exceeded the threshold\\n      if (this.buffer.length >= this.bufferSize) {\\n        const float32Array = this.isMuted \\n          ? new Float32Array(this.buffer.length)\\n          : new Float32Array(this.buffer);\\n\\n        let encodedArray = this.format === \"ulaw\"\\n          ? new Uint8Array(float32Array.length)\\n          : new Int16Array(float32Array.length);\\n\\n        // Iterate through the Float32Array and convert each sample to PCM16\\n        for (let i = 0; i < float32Array.length; i++) {\\n          // Clamp the value to the range [-1, 1]\\n          let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n\\n          // Scale the sample to the range [-32768, 32767]\\n          let value = sample < 0 ? sample * 32768 : sample * 32767;\\n          if (this.format === \"ulaw\") {\\n            value = encodeSample(Math.round(value));\\n          }\\n\\n          encodedArray[i] = value;\\n        }\\n\\n        // Send the buffered data to the main script\\n        this.port.postMessage([encodedArray, maxVolume]);\\n\\n        // Clear the buffer after sending\\n        this.buffer = [];\\n      }\\n    }\\n    return true; // Continue processing\\n  }\\n}\\nregisterProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n');function i(){return[\"iPad Simulator\",\"iPhone Simulator\",\"iPod Simulator\",\"iPad\",\"iPhone\",\"iPod\"].includes(navigator.platform)||navigator.userAgent.includes(\"Mac\")&&\"ontouchend\"in document}class r{static async create({sampleRate:e,format:t,preferHeadphonesForIosDevices:n}){let s=null,a=null;try{const l={sampleRate:{ideal:e},echoCancellation:{ideal:!0},noiseSuppression:{ideal:!0}};if(i()&&n){const e=(await window.navigator.mediaDevices.enumerateDevices()).find(e=>\"audioinput\"===e.kind&&[\"airpod\",\"headphone\",\"earphone\"].find(t=>e.label.toLowerCase().includes(t)));e&&(l.deviceId={ideal:e.deviceId})}const c=navigator.mediaDevices.getSupportedConstraints().sampleRate;s=new window.AudioContext(c?{sampleRate:e}:{});const u=s.createAnalyser();c||await s.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\"),await o(s.audioWorklet),a=await navigator.mediaDevices.getUserMedia({audio:l});const d=s.createMediaStreamSource(a),h=new AudioWorkletNode(s,\"raw-audio-processor\");return h.port.postMessage({type:\"setFormat\",format:t,sampleRate:e}),d.connect(u),u.connect(h),await s.resume(),new r(s,u,h,a)}catch(e){var l,c;throw null==(l=a)||l.getTracks().forEach(e=>e.stop()),null==(c=s)||c.close(),e}}constructor(e,t,n,s){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=t,this.worklet=n,this.inputStream=s}async close(){this.inputStream.getTracks().forEach(e=>e.stop()),await this.context.close()}setMuted(e){this.worklet.port.postMessage({type:\"setMuted\",isMuted:e})}}const l=a(\"audio-concat-processor\",'\\nconst decodeTable = [0,132,396,924,1980,4092,8316,16764];\\n\\nexport function decodeSample(muLawSample) {\\n  let sign;\\n  let exponent;\\n  let mantissa;\\n  let sample;\\n  muLawSample = ~muLawSample;\\n  sign = (muLawSample & 0x80);\\n  exponent = (muLawSample >> 4) & 0x07;\\n  mantissa = muLawSample & 0x0F;\\n  sample = decodeTable[exponent] + (mantissa << (exponent+3));\\n  if (sign !== 0) sample = -sample;\\n\\n  return sample;\\n}\\n\\nclass AudioConcatProcessor extends AudioWorkletProcessor {\\n  constructor() {\\n    super();\\n    this.buffers = []; // Initialize an empty buffer\\n    this.cursor = 0;\\n    this.currentBuffer = null;\\n    this.wasInterrupted = false;\\n    this.finished = false;\\n    \\n    this.port.onmessage = ({ data }) => {\\n      switch (data.type) {\\n        case \"setFormat\":\\n          this.format = data.format;\\n          break;\\n        case \"buffer\":\\n          this.wasInterrupted = false;\\n          this.buffers.push(\\n            this.format === \"ulaw\"\\n              ? new Uint8Array(data.buffer)\\n              : new Int16Array(data.buffer)\\n          );\\n          break;\\n        case \"interrupt\":\\n          this.wasInterrupted = true;\\n          break;\\n        case \"clearInterrupted\":\\n          if (this.wasInterrupted) {\\n            this.wasInterrupted = false;\\n            this.buffers = [];\\n            this.currentBuffer = null;\\n          }\\n      }\\n    };\\n  }\\n  process(_, outputs) {\\n    let finished = false;\\n    const output = outputs[0][0];\\n    for (let i = 0; i < output.length; i++) {\\n      if (!this.currentBuffer) {\\n        if (this.buffers.length === 0) {\\n          finished = true;\\n          break;\\n        }\\n        this.currentBuffer = this.buffers.shift();\\n        this.cursor = 0;\\n      }\\n\\n      let value = this.currentBuffer[this.cursor];\\n      if (this.format === \"ulaw\") {\\n        value = decodeSample(value);\\n      }\\n      output[i] = value / 32768;\\n      this.cursor++;\\n\\n      if (this.cursor >= this.currentBuffer.length) {\\n        this.currentBuffer = null;\\n      }\\n    }\\n\\n    if (this.finished !== finished) {\\n      this.finished = finished;\\n      this.port.postMessage({ type: \"process\", finished });\\n    }\\n\\n    return true; // Continue processing\\n  }\\n}\\n\\nregisterProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n');class c{static async create({sampleRate:e,format:t}){let n=null;try{n=new AudioContext({sampleRate:e});const s=n.createAnalyser(),a=n.createGain();a.connect(s),s.connect(n.destination),await l(n.audioWorklet);const o=new AudioWorkletNode(n,\"audio-concat-processor\");return o.port.postMessage({type:\"setFormat\",format:t}),o.connect(a),await n.resume(),new c(n,s,a,o)}catch(e){var s;throw null==(s=n)||s.close(),e}}constructor(e,t,n,s){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=t,this.gain=n,this.worklet=s}async close(){await this.context.close()}}function u(e){return!!e.type}class d{static async create(e){let t=null;try{var n;const s=null!=(n=e.origin)?n:\"wss://api.elevenlabs.io\",a=e.signedUrl?e.signedUrl:s+\"/v1/convai/conversation?agent_id=\"+e.agentId,o=[\"convai\"];e.authorization&&o.push(`bearer.${e.authorization}`),t=new WebSocket(a,o);const i=await new Promise((n,s)=>{t.addEventListener(\"open\",()=>{var n;const s={type:\"conversation_initiation_client_data\"};var a,o,i,r;e.overrides&&(s.conversation_config_override={agent:{prompt:null==(a=e.overrides.agent)?void 0:a.prompt,first_message:null==(o=e.overrides.agent)?void 0:o.firstMessage,language:null==(i=e.overrides.agent)?void 0:i.language},tts:{voice_id:null==(r=e.overrides.tts)?void 0:r.voiceId}}),e.customLlmExtraBody&&(s.custom_llm_extra_body=e.customLlmExtraBody),e.dynamicVariables&&(s.dynamic_variables=e.dynamicVariables),null==(n=t)||n.send(JSON.stringify(s))},{once:!0}),t.addEventListener(\"error\",e=>{setTimeout(()=>s(e),0)}),t.addEventListener(\"close\",s),t.addEventListener(\"message\",e=>{const t=JSON.parse(e.data);u(t)&&(\"conversation_initiation_metadata\"===t.type?n(t.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})}),{conversation_id:r,agent_output_audio_format:l,user_input_audio_format:c}=i,p=h(null!=c?c:\"pcm_16000\"),m=h(l);return new d(t,r,p,m)}catch(e){var s;throw null==(s=t)||s.close(),e}}constructor(e,t,n,s){this.socket=void 0,this.conversationId=void 0,this.inputFormat=void 0,this.outputFormat=void 0,this.queue=[],this.disconnectionDetails=null,this.onDisconnectCallback=null,this.onMessageCallback=null,this.socket=e,this.conversationId=t,this.inputFormat=n,this.outputFormat=s,this.socket.addEventListener(\"error\",e=>{setTimeout(()=>this.disconnect({reason:\"error\",message:\"The connection was closed due to a socket error.\",context:e}),0)}),this.socket.addEventListener(\"close\",e=>{this.disconnect(1e3===e.code?{reason:\"agent\",context:e}:{reason:\"error\",message:e.reason||\"The connection was closed by the server.\",context:e})}),this.socket.addEventListener(\"message\",e=>{try{const t=JSON.parse(e.data);if(!u(t))return;this.onMessageCallback?this.onMessageCallback(t):this.queue.push(t)}catch(e){}})}close(){this.socket.close()}sendMessage(e){this.socket.send(JSON.stringify(e))}onMessage(e){this.onMessageCallback=e,this.queue.forEach(e),this.queue=[]}onDisconnect(e){this.onDisconnectCallback=e,this.disconnectionDetails&&e(this.disconnectionDetails)}disconnect(e){var t;this.disconnectionDetails||(this.disconnectionDetails=e,null==(t=this.onDisconnectCallback)||t.call(this,e))}}function h(e){const[t,n]=e.split(\"_\");if(![\"pcm\",\"ulaw\"].includes(t))throw new Error(`Invalid format: ${e}`);const s=parseInt(n);if(isNaN(s))throw new Error(`Invalid sample rate: ${n}`);return{format:t,sampleRate:s}}const p={clientTools:{}},m={onConnect:()=>{},onDebug:()=>{},onDisconnect:()=>{},onError:()=>{},onMessage:()=>{},onAudio:()=>{},onModeChange:()=>{},onStatusChange:()=>{},onCanSendFeedbackChange:()=>{}};class f{static async startSession(t){var n;const s=e({},p,m,t);s.onStatusChange({status:\"connecting\"}),s.onCanSendFeedbackChange({canSendFeedback:!1});let a=null,o=null,l=null,u=null,h=null;if(null==(n=t.useWakeLock)||n)try{h=await navigator.wakeLock.request(\"screen\")}catch(e){}try{var g,v;u=await navigator.mediaDevices.getUserMedia({audio:!0});const n=null!=(g=t.connectionDelay)?g:{default:0,android:3e3};let p=n.default;var w;if(/android/i.test(navigator.userAgent))p=null!=(w=n.android)?w:p;else if(i()){var y;p=null!=(y=n.ios)?y:p}return p>0&&await new Promise(e=>setTimeout(e,p)),o=await d.create(t),[a,l]=await Promise.all([r.create(e({},o.inputFormat,{preferHeadphonesForIosDevices:t.preferHeadphonesForIosDevices})),c.create(o.outputFormat)]),null==(v=u)||v.getTracks().forEach(e=>e.stop()),u=null,new f(s,o,a,l,h)}catch(e){var _,b,k,M;s.onStatusChange({status:\"disconnected\"}),null==(_=u)||_.getTracks().forEach(e=>e.stop()),null==(b=o)||b.close(),await(null==(k=a)?void 0:k.close()),await(null==(M=l)?void 0:M.close());try{var S;await(null==(S=h)?void 0:S.release()),h=null}catch(e){}throw e}}constructor(e,s,a,o,i){var r=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.wakeLock=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.currentEventId=1,this.lastFeedbackEventId=1,this.canSendFeedback=!1,this.endSession=()=>this.endSessionWithDetails({reason:\"user\"}),this.endSessionWithDetails=async function(e){if(\"connected\"===r.status||\"connecting\"===r.status){r.updateStatus(\"disconnecting\");try{var t;await(null==(t=r.wakeLock)?void 0:t.release()),r.wakeLock=null}catch(e){}r.connection.close(),await r.input.close(),await r.output.close(),r.updateStatus(\"disconnected\"),r.options.onDisconnect(e)}},this.updateMode=e=>{e!==this.mode&&(this.mode=e,this.options.onModeChange({mode:e}))},this.updateStatus=e=>{e!==this.status&&(this.status=e,this.options.onStatusChange({status:e}))},this.updateCanSendFeedback=()=>{const e=this.currentEventId!==this.lastFeedbackEventId;this.canSendFeedback!==e&&(this.canSendFeedback=e,this.options.onCanSendFeedbackChange({canSendFeedback:e}))},this.onMessage=async function(e){switch(e.type){case\"interruption\":return e.interruption_event&&(r.lastInterruptTimestamp=e.interruption_event.event_id),void r.fadeOutAudio();case\"agent_response\":return void r.options.onMessage({source:\"ai\",message:e.agent_response_event.agent_response});case\"user_transcript\":return void r.options.onMessage({source:\"user\",message:e.user_transcription_event.user_transcript});case\"internal_tentative_agent_response\":return void r.options.onDebug({type:\"tentative_agent_response\",response:e.tentative_agent_response_internal_event.tentative_agent_response});case\"client_tool_call\":if(r.options.clientTools.hasOwnProperty(e.client_tool_call.tool_name))try{var t;const n=null!=(t=await r.options.clientTools[e.client_tool_call.tool_name](e.client_tool_call.parameters))?t:\"Client tool execution successful.\",s=\"object\"==typeof n?JSON.stringify(n):String(n);r.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:s,is_error:!1})}catch(t){r.onError(\"Client tool execution failed with following error: \"+(null==t?void 0:t.message),{clientToolName:e.client_tool_call.tool_name}),r.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:\"Client tool execution failed: \"+(null==t?void 0:t.message),is_error:!0})}else{if(r.options.onUnhandledClientToolCall)return void r.options.onUnhandledClientToolCall(e.client_tool_call);r.onError(`Client tool with name ${e.client_tool_call.tool_name} is not defined on client`,{clientToolName:e.client_tool_call.tool_name}),r.connection.sendMessage({type:\"client_tool_result\",tool_call_id:e.client_tool_call.tool_call_id,result:`Client tool with name ${e.client_tool_call.tool_name} is not defined on client`,is_error:!0})}return;case\"audio\":return void(r.lastInterruptTimestamp<=e.audio_event.event_id&&(r.options.onAudio(e.audio_event.audio_base_64),r.addAudioBase64Chunk(e.audio_event.audio_base_64),r.currentEventId=e.audio_event.event_id,r.updateCanSendFeedback(),r.updateMode(\"speaking\")));case\"ping\":return void r.connection.sendMessage({type:\"pong\",event_id:e.ping_event.event_id});default:return void r.options.onDebug(e)}},this.onInputWorkletMessage=e=>{\"connected\"===this.status&&this.connection.sendMessage({user_audio_chunk:t(e.data[0].buffer)})},this.onOutputWorkletMessage=({data:e})=>{\"process\"===e.type&&this.updateMode(e.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=e=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:\"clearInterrupted\"}),this.output.worklet.port.postMessage({type:\"buffer\",buffer:n(e)})},this.fadeOutAudio=()=>{this.updateMode(\"listening\"),this.output.worklet.port.postMessage({type:\"interrupt\"}),this.output.gain.gain.exponentialRampToValueAtTime(1e-4,this.output.context.currentTime+2),setTimeout(()=>{this.output.gain.gain.value=this.volume,this.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3)},this.onError=(e,t)=>{console.error(e,t),this.options.onError(e,t)},this.calculateVolume=e=>{if(0===e.length)return 0;let t=0;for(let n=0;n<e.length;n++)t+=e[n]/255;return t/=e.length,t<0?0:t>1?1:t},this.getId=()=>this.connection.conversationId,this.isOpen=()=>\"connected\"===this.status,this.setVolume=({volume:e})=>{this.volume=e},this.setMicMuted=e=>{this.input.setMuted(e)},this.getInputByteFrequencyData=()=>(null!=this.inputFrequencyData||(this.inputFrequencyData=new Uint8Array(this.input.analyser.frequencyBinCount)),this.input.analyser.getByteFrequencyData(this.inputFrequencyData),this.inputFrequencyData),this.getOutputByteFrequencyData=()=>(null!=this.outputFrequencyData||(this.outputFrequencyData=new Uint8Array(this.output.analyser.frequencyBinCount)),this.output.analyser.getByteFrequencyData(this.outputFrequencyData),this.outputFrequencyData),this.getInputVolume=()=>this.calculateVolume(this.getInputByteFrequencyData()),this.getOutputVolume=()=>this.calculateVolume(this.getOutputByteFrequencyData()),this.sendFeedback=e=>{this.canSendFeedback?(this.connection.sendMessage({type:\"feedback\",score:e?\"like\":\"dislike\",event_id:this.currentEventId}),this.lastFeedbackEventId=this.currentEventId,this.updateCanSendFeedback()):console.warn(0===this.lastFeedbackEventId?\"Cannot send feedback: the conversation has not started yet.\":\"Cannot send feedback: feedback has already been sent for the current response.\")},this.sendContextualUpdate=e=>{this.connection.sendMessage({type:\"contextual_update\",text:e})},this.sendUserMessage=e=>{this.connection.sendMessage({type:\"user_message\",text:e})},this.sendUserActivity=()=>{this.connection.sendMessage({type:\"user_activity\"})},this.options=e,this.connection=s,this.input=a,this.output=o,this.wakeLock=i,this.options.onConnect({conversationId:s.conversationId}),this.connection.onDisconnect(this.endSessionWithDetails),this.connection.onMessage(this.onMessage),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}}function g(e,t,n=\"https://api.elevenlabs.io\"){return fetch(`${n}/v1/convai/conversations/${e}/feedback`,{method:\"POST\",body:JSON.stringify({feedback:t?\"like\":\"dislike\"}),headers:{\"Content-Type\":\"application/json\"}})}\n//# sourceMappingURL=lib.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@11labs/client/dist/lib.modern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@11labs/react/dist/lib.modern.js":
/*!*******************************************************!*\
  !*** ./node_modules/@11labs/react/dist/lib.modern.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postOverallFeedback: () => (/* reexport safe */ _11labs_client__WEBPACK_IMPORTED_MODULE_1__.postOverallFeedback),\n/* harmony export */   useConversation: () => (/* binding */ a)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _11labs_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @11labs/client */ \"(ssr)/./node_modules/@11labs/client/dist/lib.modern.js\");\nfunction u(){return u=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)({}).hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},u.apply(null,arguments)}const l=[\"micMuted\",\"volume\"];function a(a={}){const{micMuted:c,volume:s}=a,o=function(e,n){if(null==e)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.includes(r))continue;t[r]=e[r]}return t}(a,l),i=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),d=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[v,g]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"disconnected\"),[m,p]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[y,f]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"listening\");return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{var e;void 0!==c&&(null==i||null==(e=i.current)||e.setMicMuted(c))},[c]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{var e;void 0!==s&&(null==i||null==(e=i.current)||e.setVolume({volume:s}))},[s]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>{var e;null==(e=i.current)||e.endSession()},[]),{startSession:async e=>{var n;if(null!=(n=i.current)&&n.isOpen())return i.current.getId();if(d.current)return(await d.current).getId();try{return d.current=_11labs_client__WEBPACK_IMPORTED_MODULE_1__.Conversation.startSession(u({},null!=o?o:{},null!=e?e:{},{onModeChange:({mode:e})=>{f(e)},onStatusChange:({status:e})=>{g(e)},onCanSendFeedbackChange:({canSendFeedback:e})=>{p(e)}})),i.current=await d.current,void 0!==c&&i.current.setMicMuted(c),void 0!==s&&i.current.setVolume({volume:s}),i.current.getId()}finally{d.current=null}},endSession:async()=>{const e=i.current;i.current=null,await(null==e?void 0:e.endSession())},setVolume:({volume:e})=>{var n;null==(n=i.current)||n.setVolume({volume:e})},getInputByteFrequencyData:()=>{var e;return null==(e=i.current)?void 0:e.getInputByteFrequencyData()},getOutputByteFrequencyData:()=>{var e;return null==(e=i.current)?void 0:e.getOutputByteFrequencyData()},getInputVolume:()=>{var e,n;return null!=(e=null==(n=i.current)?void 0:n.getInputVolume())?e:0},getOutputVolume:()=>{var e,n;return null!=(e=null==(n=i.current)?void 0:n.getOutputVolume())?e:0},sendFeedback:e=>{var n;null==(n=i.current)||n.sendFeedback(e)},getId:()=>{var e;return null==(e=i.current)?void 0:e.getId()},sendContextualUpdate:e=>{var n;null==(n=i.current)||n.sendContextualUpdate(e)},sendUserMessage:e=>{var n;null==(n=i.current)||n.sendUserMessage(e)},sendUserActivity:()=>{var e;null==(e=i.current)||e.sendUserActivity()},status:v,canSendFeedback:m,micMuted:c,isSpeaking:\"speaking\"===y}}\n//# sourceMappingURL=lib.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQDExbGFicy9yZWFjdC9kaXN0L2xpYi5tb2Rlcm4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwSixhQUFhLHdEQUF3RCxZQUFZLG1CQUFtQixLQUFLLG1CQUFtQixrQkFBa0Isd0NBQXdDLFNBQVMseUJBQXlCLDhCQUE4QixlQUFlLEVBQUUsTUFBTSxvQkFBb0IsbUJBQW1CLG9CQUFvQixTQUFTLG9CQUFvQiwyQkFBMkIsMEJBQTBCLFVBQVUsU0FBUyxRQUFRLDZDQUFDLFNBQVMsNkNBQUMsYUFBYSwrQ0FBQyx1QkFBdUIsK0NBQUMsV0FBVywrQ0FBQyxjQUFjLE9BQU8sZ0RBQUMsTUFBTSxNQUFNLDZEQUE2RCxNQUFNLGdEQUFDLE1BQU0sTUFBTSx3REFBd0QsU0FBUyxHQUFHLE1BQU0sZ0RBQUMsVUFBVSxNQUFNLG9DQUFvQyxNQUFNLHVCQUF1QixNQUFNLDREQUE0RCw2Q0FBNkMsSUFBSSxpQkFBaUIsd0RBQUMsa0JBQWtCLGFBQWEsYUFBYSxFQUFFLGVBQWUsT0FBTyxJQUFJLEtBQUssa0JBQWtCLFNBQVMsSUFBSSxLQUFLLDJCQUEyQixrQkFBa0IsSUFBSSxNQUFNLG1HQUFtRyxTQUFTLG9CQUFvQixRQUFRLGdCQUFnQixzQkFBc0Isa0JBQWtCLG9EQUFvRCxhQUFhLFNBQVMsSUFBSSxNQUFNLGtDQUFrQyxTQUFTLEVBQUUsZ0NBQWdDLE1BQU0sZ0VBQWdFLGlDQUFpQyxNQUFNLGlFQUFpRSxxQkFBcUIsUUFBUSxtRUFBbUUsc0JBQXNCLFFBQVEsb0VBQW9FLGtCQUFrQixNQUFNLHVDQUF1QyxZQUFZLE1BQU0sNENBQTRDLDBCQUEwQixNQUFNLCtDQUErQyxxQkFBcUIsTUFBTSwwQ0FBMEMsdUJBQXVCLE1BQU0sMENBQTBDLGtFQUErRjtBQUMvMEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbGV2ZW5sYWJzLW5leHRqcy1kZW1vLy4vbm9kZV9tb2R1bGVzL0AxMWxhYnMvcmVhY3QvZGlzdC9saWIubW9kZXJuLmpzP2Q2NDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e3VzZVJlZiBhcyBlLHVzZVN0YXRlIGFzIG4sdXNlRWZmZWN0IGFzIHR9ZnJvbVwicmVhY3RcIjtpbXBvcnR7Q29udmVyc2F0aW9uIGFzIHJ9ZnJvbVwiQDExbGFicy9jbGllbnRcIjtleHBvcnR7cG9zdE92ZXJhbGxGZWVkYmFja31mcm9tXCJAMTFsYWJzL2NsaWVudFwiO2Z1bmN0aW9uIHUoKXtyZXR1cm4gdT1PYmplY3QuYXNzaWduP09iamVjdC5hc3NpZ24uYmluZCgpOmZ1bmN0aW9uKGUpe2Zvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspe3ZhciB0PWFyZ3VtZW50c1tuXTtmb3IodmFyIHIgaW4gdCkoe30pLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKGVbcl09dFtyXSl9cmV0dXJuIGV9LHUuYXBwbHkobnVsbCxhcmd1bWVudHMpfWNvbnN0IGw9W1wibWljTXV0ZWRcIixcInZvbHVtZVwiXTtmdW5jdGlvbiBhKGE9e30pe2NvbnN0e21pY011dGVkOmMsdm9sdW1lOnN9PWEsbz1mdW5jdGlvbihlLG4pe2lmKG51bGw9PWUpcmV0dXJue307dmFyIHQ9e307Zm9yKHZhciByIGluIGUpaWYoe30uaGFzT3duUHJvcGVydHkuY2FsbChlLHIpKXtpZihuLmluY2x1ZGVzKHIpKWNvbnRpbnVlO3Rbcl09ZVtyXX1yZXR1cm4gdH0oYSxsKSxpPWUobnVsbCksZD1lKG51bGwpLFt2LGddPW4oXCJkaXNjb25uZWN0ZWRcIiksW20scF09bighMSksW3ksZl09bihcImxpc3RlbmluZ1wiKTtyZXR1cm4gdCgoKT0+e3ZhciBlO3ZvaWQgMCE9PWMmJihudWxsPT1pfHxudWxsPT0oZT1pLmN1cnJlbnQpfHxlLnNldE1pY011dGVkKGMpKX0sW2NdKSx0KCgpPT57dmFyIGU7dm9pZCAwIT09cyYmKG51bGw9PWl8fG51bGw9PShlPWkuY3VycmVudCl8fGUuc2V0Vm9sdW1lKHt2b2x1bWU6c30pKX0sW3NdKSx0KCgpPT4oKT0+e3ZhciBlO251bGw9PShlPWkuY3VycmVudCl8fGUuZW5kU2Vzc2lvbigpfSxbXSkse3N0YXJ0U2Vzc2lvbjphc3luYyBlPT57dmFyIG47aWYobnVsbCE9KG49aS5jdXJyZW50KSYmbi5pc09wZW4oKSlyZXR1cm4gaS5jdXJyZW50LmdldElkKCk7aWYoZC5jdXJyZW50KXJldHVybihhd2FpdCBkLmN1cnJlbnQpLmdldElkKCk7dHJ5e3JldHVybiBkLmN1cnJlbnQ9ci5zdGFydFNlc3Npb24odSh7fSxudWxsIT1vP286e30sbnVsbCE9ZT9lOnt9LHtvbk1vZGVDaGFuZ2U6KHttb2RlOmV9KT0+e2YoZSl9LG9uU3RhdHVzQ2hhbmdlOih7c3RhdHVzOmV9KT0+e2coZSl9LG9uQ2FuU2VuZEZlZWRiYWNrQ2hhbmdlOih7Y2FuU2VuZEZlZWRiYWNrOmV9KT0+e3AoZSl9fSkpLGkuY3VycmVudD1hd2FpdCBkLmN1cnJlbnQsdm9pZCAwIT09YyYmaS5jdXJyZW50LnNldE1pY011dGVkKGMpLHZvaWQgMCE9PXMmJmkuY3VycmVudC5zZXRWb2x1bWUoe3ZvbHVtZTpzfSksaS5jdXJyZW50LmdldElkKCl9ZmluYWxseXtkLmN1cnJlbnQ9bnVsbH19LGVuZFNlc3Npb246YXN5bmMoKT0+e2NvbnN0IGU9aS5jdXJyZW50O2kuY3VycmVudD1udWxsLGF3YWl0KG51bGw9PWU/dm9pZCAwOmUuZW5kU2Vzc2lvbigpKX0sc2V0Vm9sdW1lOih7dm9sdW1lOmV9KT0+e3ZhciBuO251bGw9PShuPWkuY3VycmVudCl8fG4uc2V0Vm9sdW1lKHt2b2x1bWU6ZX0pfSxnZXRJbnB1dEJ5dGVGcmVxdWVuY3lEYXRhOigpPT57dmFyIGU7cmV0dXJuIG51bGw9PShlPWkuY3VycmVudCk/dm9pZCAwOmUuZ2V0SW5wdXRCeXRlRnJlcXVlbmN5RGF0YSgpfSxnZXRPdXRwdXRCeXRlRnJlcXVlbmN5RGF0YTooKT0+e3ZhciBlO3JldHVybiBudWxsPT0oZT1pLmN1cnJlbnQpP3ZvaWQgMDplLmdldE91dHB1dEJ5dGVGcmVxdWVuY3lEYXRhKCl9LGdldElucHV0Vm9sdW1lOigpPT57dmFyIGUsbjtyZXR1cm4gbnVsbCE9KGU9bnVsbD09KG49aS5jdXJyZW50KT92b2lkIDA6bi5nZXRJbnB1dFZvbHVtZSgpKT9lOjB9LGdldE91dHB1dFZvbHVtZTooKT0+e3ZhciBlLG47cmV0dXJuIG51bGwhPShlPW51bGw9PShuPWkuY3VycmVudCk/dm9pZCAwOm4uZ2V0T3V0cHV0Vm9sdW1lKCkpP2U6MH0sc2VuZEZlZWRiYWNrOmU9Pnt2YXIgbjtudWxsPT0obj1pLmN1cnJlbnQpfHxuLnNlbmRGZWVkYmFjayhlKX0sZ2V0SWQ6KCk9Pnt2YXIgZTtyZXR1cm4gbnVsbD09KGU9aS5jdXJyZW50KT92b2lkIDA6ZS5nZXRJZCgpfSxzZW5kQ29udGV4dHVhbFVwZGF0ZTplPT57dmFyIG47bnVsbD09KG49aS5jdXJyZW50KXx8bi5zZW5kQ29udGV4dHVhbFVwZGF0ZShlKX0sc2VuZFVzZXJNZXNzYWdlOmU9Pnt2YXIgbjtudWxsPT0obj1pLmN1cnJlbnQpfHxuLnNlbmRVc2VyTWVzc2FnZShlKX0sc2VuZFVzZXJBY3Rpdml0eTooKT0+e3ZhciBlO251bGw9PShlPWkuY3VycmVudCl8fGUuc2VuZFVzZXJBY3Rpdml0eSgpfSxzdGF0dXM6dixjYW5TZW5kRmVlZGJhY2s6bSxtaWNNdXRlZDpjLGlzU3BlYWtpbmc6XCJzcGVha2luZ1wiPT09eX19ZXhwb3J0e2EgYXMgdXNlQ29udmVyc2F0aW9ufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpYi5tb2Rlcm4uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@11labs/react/dist/lib.modern.js\n");

/***/ })

};
;