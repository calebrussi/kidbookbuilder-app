import { WebSocket } from 'ws';import * as dotenv from 'dotenv';import * as fs from 'node:fs';// Load the API key from the .env filedotenv.config();export class TextToSpeechWebSocket {    private ws: WebSocket | null = null;    private readonly voiceId = 'Xb7hH8MSUJpSbSDYk0k2';    private readonly modelId = 'eleven_flash_v2_5';    private readonly outputDir = './output';    constructor() {        const apiKey = process.env.ELEVEN_LABS_API_KEY;        if (!apiKey) {            throw new Error('Missing ELEVEN_LABS_API_KEY in environment variables');        }        this.setupWebSocket(apiKey);        this.ensureOutputDirectory();    }    private setupWebSocket(apiKey: string): void {        const uri = `wss://api.elevenlabs.io/v1/text-to-speech/${this.voiceId}/stream-input?model_id=${this.modelId}`;                this.ws = new WebSocket(uri, {            headers: { 'xi-api-key': apiKey }        });        this.ws.on('open', () => {            console.log('WebSocket connection established');        });        this.ws.on('error', (error) => {            console.error('WebSocket error:', error);        });        this.ws.on('close', () => {            console.log('WebSocket connection closed');        });    }    private ensureOutputDirectory(): void {        if (!fs.existsSync(this.outputDir)) {            fs.mkdirSync(this.outputDir, { recursive: true });        }    }    public async speak(text: string): Promise<void> {        if (!this.ws) {            throw new Error('WebSocket connection not established');        }        return new Promise((resolve, reject) => {            try {                const message = {                    text,                    voice_settings: {                        stability: 0.71,                        similarity_boost: 0.85                    }                };                this.ws!.send(JSON.stringify(message));                                // Send empty message to indicate end of stream                setTimeout(() => {                    this.ws!.send(JSON.stringify({ text: '' }));                    resolve();                }, 100);            } catch (error) {                reject(error);            }        });    }    public close(): void {        if (this.ws) {            this.ws.close();            this.ws = null;        }    }}